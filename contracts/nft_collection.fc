#include "imports/stdlib.fc";
#include "./op_codes.fc";
#include "./params.fc";


const whitelist_price = 0; ;; 2 TON
const public_price = 100000000; ;; 3.1 TON
const gas_consumption = 30000000; ;; 0.03
const min_gas_consumption = 15000000;
const min_ton_for_storage = 30000000; ;; 0.03

(slice, int, cell, cell, cell, int, int, int, int, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref(), ;; royalty_params
     ds~load_int(4), ;; mint started?
     ds~load_uint(64), ;; start time
     ds~load_uint(64), ;; public mint start time
     ds~load_uint(64), ;; end_public_mint_time
     ds~load_ref() ;; whitelist_checker code
     );
}

() save_data(
  slice owner_address, 
  int next_item_index, 
  cell content, 
  cell nft_item_code, 
  cell royalty_params, 
  int started, 
  int start_time, 
  int public_start_time,
  int end_public_mint_time,
  cell whitelist_checker_code
) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .store_int(started, 4)
    .store_uint(start_time, 64)
    .store_uint(public_start_time, 64)
    .store_uint(end_public_mint_time, 64)
    .store_ref(whitelist_checker_code)
    .end_cell());
}



cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}


cell calculate_whitelist_checker_state_init(slice address, cell whitelist_checker_code) {
    cell init_data = begin_cell()
        .store_slice(address)
        .store_int(0, 4)
        .store_slice(my_address()).end_cell();

    return begin_cell()
        .store_uint(0, 2)
        .store_dict(whitelist_checker_code)
        .store_dict(init_data)
        .store_uint(0, 1).end_cell();
}

slice calculate_whitelist_checker_address(int wc, cell state_init) {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell().begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}


() mint_nft(slice in_msg_body) impure {

    var (
      owner_address, 
      next_item_index, 
      content, nft_item_code, 
      royalty_params, started, 
      start_time, 
      public_start_time, end_public_mint_time, whitelist_checker_code ) = load_data();

    int item_index = in_msg_body~load_uint(64);

    throw_unless(402, item_index <= next_item_index);
    var is_last = item_index == next_item_index;
    if (is_last) {
        next_item_index += 1;
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, started, start_time, public_start_time, end_public_mint_time, whitelist_checker_code);
    }
     deploy_nft_item(item_index, nft_item_code, min_ton_for_storage, in_msg_body~load_ref());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();

    if (flags & 1) { ;; ignore bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (
      owner_address, 
      next_item_index, 
      content, nft_item_code, 
      royalty_params, started, 
      start_time, 
      public_start_time, end_public_mint_time, whitelist_checker_code ) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }


    if(op == 1) { 
      if(started == 0) { ;; not started
        throw(1000);
      }

      int time_now = now();

      if(time_now < start_time){
        throw(1001);
      }

      if(time_now > end_public_mint_time) {
        throw(1002); ;; public mint over
      }

      if(time_now < public_start_time) {
        ;; whitelist mint
        throw_unless(289, msg_value >= gas_consumption + min_ton_for_storage);

        slice from = in_msg_body~load_msg_addr();
        int whitelisted = in_msg_body~load_int(4);

        cell whitelist_state_init = calculate_whitelist_checker_state_init(from, whitelist_checker_code);
        slice whitelist_address = calculate_whitelist_checker_address(workchain(), whitelist_state_init);
        throw_unless(291, equal_slices_bits(sender_address, whitelist_address));
      }

      if(time_now >= public_start_time) {
        throw_unless(290, msg_value >= public_price + gas_consumption + min_ton_for_storage);
      }

      mint_nft(in_msg_body);

      return ();
    }


    throw_unless(401, equal_slices_bits(sender_address, owner_address));

    if (op == 2) { ;; batch deploy of new nfts
      int counter = 0;
      cell deploy_list = in_msg_body~load_ref();
      do {
        var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
        if (f?) {
          counter += 1;
          if (counter >= 250) { ;; Limit due to limits of action list size
            throw(399);
          }

          throw_unless(403 + counter, item_index <= next_item_index);
          deploy_nft_item(item_index, nft_item_code, item~load_coins(), item~load_ref());
          if (item_index == next_item_index) {
            next_item_index += 1;
          }
        }
      } until ( ~ f?);
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, started, start_time, public_start_time, end_public_mint_time, whitelist_checker_code);
      return ();
    }

    if (op == 3) { ;; change owner
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, started, start_time, public_start_time, end_public_mint_time, whitelist_checker_code);
      return ();
    }

    if(op == 4) { ;; updated start time and started
      started = in_msg_body~load_int(4);
      int now = now();
      start_time = now + in_msg_body~load_uint(64);
      public_start_time = start_time + in_msg_body~load_uint(64);
      end_public_mint_time = public_start_time + in_msg_body~load_uint(64);
      save_data(owner_address,next_item_index,content,nft_item_code,royalty_params,started,start_time,public_start_time,end_public_mint_time, whitelist_checker_code);

      return ();
    }

    if(op == 5) { ;; withdraw ton
      int withdraw_amount = in_msg_body~load_coins();
      slice to_addr = in_msg_body~load_msg_addr();
      var [balance, _] = get_balance();
      throw_unless(104, balance >= withdraw_amount);

      int return_value = min(withdraw_amount, balance - min_ton_for_storage);
      
      ;; sending internal message logic

      int msg_mode = 1; ;; 0 (ordinary message) + 1 (flag- pay transfer fee separate from the message value)

      var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(to_addr)
      .store_coins(return_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

      send_raw_message(msg.end_cell(), msg_mode);

      return();
    }

    if(op == 6) { ;; update content
      content = in_msg_body~load_ref();
      save_data(owner_address,next_item_index,content,nft_item_code,royalty_params,started,start_time,public_start_time,end_public_mint_time, whitelist_checker_code);
      return ();
    }

    if( op == 7 ) {
        ;; whitelist wallet

        throw_unless(500, msg_value > gas_consumption);

        slice address = in_msg_body~load_msg_addr();

        cell body = begin_cell().store_uint(10, 32).end_cell();

        cell whitelist_state_init = calculate_whitelist_checker_state_init(address, whitelist_checker_code);
        slice whitelist_address = calculate_whitelist_checker_address(workchain(), whitelist_state_init);

        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(whitelist_address)
            .store_coins(gas_consumption)
            .store_uint(7, 108)
            .store_ref(whitelist_state_init)
            .store_ref(body)
        .end_cell();

        send_raw_message(msg, 1);

        return ();
    }

    throw(0xffff);

}




;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _, _, _, _, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

(int, int, int, int, int) get_contract_time_status() method_id {
  var (_, _, _, _, _, started, start_time, public_start_time, end_public_mint_time, _) = load_data();
  return (started, start_time, public_start_time, end_public_mint_time, now());
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _, _, _, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, royalty, _, _, _, _, _) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, content, _, _, _, _, _, _, _) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}

slice get_whitelist_checker_address(slice address) method_id {
    var (_, _, _, _, _, _, _, _, _, whitelist_checker_code ) = load_data();
    cell state_init = calculate_whitelist_checker_state_init(address, whitelist_checker_code);
    return calculate_whitelist_checker_address(workchain(), state_init);
}